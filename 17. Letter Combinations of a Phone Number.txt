
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].


------Code------

public static void main(String[] args) {
		String digits = "";
		System.out.println(letterCombinations(digits));
	}
	
	public static List<String> letterCombinations(String digits) {
        List<String> l = new ArrayList<>();
        if(digits.length() == 0)
            return l;
        StringsFormed(digits, "", l);
        return l;
        
    }
	
	public static void StringsFormed(String q, String ans, List<String> l) {
		if(q.length() == 0) {
			//System.out.print(ans + " ");
			l.add(ans);
			return;
		}
		
		char c = q.charAt(0);
		String pressed = key[c-48];
		
		for(int i = 0; i < pressed.length(); i++) {
			StringsFormed(q.substring(1), ans + pressed.charAt(i), l);
		}
		
	}